//! Generated from registry.yaml
//! Namespace: user-agent
//! This file contains semantic convention registry definitions.

const std = @import("std");
const types = @import("../types.zig");

pub const syntheticTypeValue = enum {
    /// Bot source.
    bot,
    /// Synthetic test source.
    @"test",

    pub fn toString(self: @This()) []const u8 {
        return switch (self) {
            .bot => "bot",
            .@"test" => "test",
        };
    }
};

/// Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html
pub const user_agent_original = types.StringAttribute{
    .name = "user_agent.original",
    .brief = "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html",
    .note = null,
    .stability = .stable,
    .requirement_level = .recommended,
};

/// Name of the user-agent extracted from original. Usually refers to the browser's name.
pub const user_agent_name = types.StringAttribute{
    .name = "user_agent.name",
    .brief = "Name of the user-agent extracted from original. Usually refers to the browser's name.",
    .note = "[Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`",
    .stability = .development,
    .requirement_level = .recommended,
};

/// Version of the user-agent extracted from original. Usually refers to the browser's version
pub const user_agent_version = types.StringAttribute{
    .name = "user_agent.version",
    .brief = "Version of the user-agent extracted from original. Usually refers to the browser's version",
    .note = "[Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`\n\n",
    .stability = .development,
    .requirement_level = .recommended,
};

/// Human readable operating system name.
pub const user_agent_os_name = types.StringAttribute{
    .name = "user_agent.os.name",
    .brief = "Human readable operating system name.",
    .note = "For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.",
    .stability = .development,
    .requirement_level = .recommended,
};

/// The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md
pub const user_agent_os_version = types.StringAttribute{
    .name = "user_agent.os.version",
    .brief = "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md",
    .note = "For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.\n\n",
    .stability = .development,
    .requirement_level = .recommended,
};

/// Specifies the category of synthetic traffic, such as tests or bots.
pub const user_agent_synthetic_type = types.EnumAttribute(syntheticTypeValue){
    .base = types.StringAttribute{
        .name = "user_agent.synthetic.type",
        .brief = "Specifies the category of synthetic traffic, such as tests or bots.",
        .note = "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.",
        .stability = .development,
        .requirement_level = .recommended,
    },
    .well_known_values = syntheticTypeValue.bot,
};

/// Describes user-agent attributes.
/// Display name: User-agent Attributes
pub const Registry = struct {
    /// Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html
    pub const original = user_agent_original;
    /// Name of the user-agent extracted from original. Usually refers to the browser's name.
    pub const name = user_agent_name;
    /// Version of the user-agent extracted from original. Usually refers to the browser's version
    pub const version = user_agent_version;
    /// Human readable operating system name.
    pub const osName = user_agent_os_name;
    /// The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md
    pub const osVersion = user_agent_os_version;
    /// Specifies the category of synthetic traffic, such as tests or bots.
    pub const syntheticType = user_agent_synthetic_type;
};

